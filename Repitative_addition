module MUL_ datapath (eqz, LdA, LdB, LdP, clrP, decB, data_in, clk);
input LdA, LdB, LdP, decB, clk;
input [15:0] data_in;
output eqz;
wire x, y, z, Bout, Bus;

PIPO1 A (x, Bus, LdA, clk);
PIPO2 P (y, z, LdP, clrP, clk);
CNTR B (Bout, Bus, LdB, decB, clk);
ADD AD (z, x, y);
EQZ COMP (eqz, Bout);
endmodule

module PIPO1 (dout, din, ld, clk);
input [15:0] din;
input ld, clk;
output reg [15:0] dout;
always @(posedge clk)
if (ld) dout <= din;
endmodule



module PIPO2 (dout, din, ld, clrP, clk);
input [15:0] din;
input ld, clr, clk;
output reg [15:0] dout;
always @(posedge clk)
if (clr) dout <= 16'b0;
else if (ld) dout <= din;
endmodule

module EQZ (eqz, data);
input [15:0] data;
output eqz;
assign eqz = (data == 0);
endmodule

module ADD (out,in1,in2);
input [15:0] in1,in2;
output reg [15:0] out;
always @( )





module  CNTR (dout, din, ld, dec, clk);
input  [15:0] din;
input [15:0] ld, dec, clk;
output reg [15:0] dout;
always @ (posedge clk)
if (ld) dout <= din;
else if (dec) <= dout - 











module controller (LdA,LdB,LdP,clrP,decB,done,clk,eqz,start,state);
input clk, eqz,start;
output LdA,LdB,LdP,clrP,decB,done;

reg [2:0] state;
parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100;
always @ (posedge clk)
   begin
	case (state)
	S0:  if (start) state <= S1;
	S1:  state <= S2;
	S2:  state <= S3;
	S3:  #2 if (eqz) <= S4;
        end case
   end

always @ (state)
   begin
	case (state)
	S0:  begin #1 LdA = 0; LdB = 0; LdP = 0; clrP = 0; decB = 0; done = 0; end
	S1:  begin #1 LdA = 1; end
	S2:  begin #1 LdA = 0; LdB = 1; clrP = 1; end
	S3:  begin #1 LdB = 0; LdP = 1; clrP = 0; decB = 1; end
	S4:  begin #1 done = 1; LdB = 0; LdP = 0; decB = 0; end
      default; begin #1 LdA = 0; LdB = 0; LdP = 0; clrP = 0; end
       end case
   end





//test bench


module MUL_test;
reg [15:0] data_in;
reg clk, start;
wir done;

MUL_ datapath DP (eqz, LdA, LdB, LdP, clrP, decB, data_in, clk);
controller CON (LdA,LdB,LdP,clrP,decB,done,clk,eqz,start,state);

 initial
  begin
    clk= 1'b0;
    #3 start = 1'b1;
    #500 $finish;
   end
 always #5 clk = ~clk;

