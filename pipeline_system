module pipe (F ,A ,B, C, D, clk);
parameter N= 10;
input [N-1:0] A, B, C,D;
input clk;
output [N-1:0] F;
reg [N-1:0] L12_x1, L12_x2, L12_D, L23_x3, L23_D, L34_F;
assign F = L34_F;
always @(posedge clk)			//stage 1
	begin
		L12_x1 <= #4 A+B;
		L12_x2 <= #4 C-D;
		L12_D <= D;
	end
always @(posedge clk)			//stage 2
	begin
		L23_x3 <= #4 L12_x1 + L12_x2;
		L23_D <= L12_D;
	end
always @(posedge clk)			//stage 3
L34_F <= #6 L23_x3 * L23_D;
endmodule

//test bench




module piple_test;
parameter N =10;
wire [N-1:0] F;
reg [N-1:0] A, B,C,D;
reg clk;
pipe MYPIPE (F,A,B,C,D,clk);
initial clk=0;
always #10 clk=~clk;

initial 
	begin
		#5 A=4; B=10; C=2; D=2; 
		#20 A=2; B=10; C=2; D=3; 
		#20 A=4; B=10; C=2; D=4;
	end 
initial
	begin
		$dumpfile ("piple.void");
		$dumpfile (0, piple_test);
		$monitor ("Time: %d, F = %d", $time, F);
		#300 $finish;
	end
endmodule



module pipe (F ,A ,B, C, D, clk);
parameter N= 10;
input [N-1:0] A, B, C,D;
input clk;
output [N-1:0] F;
reg [N-1:0] L12_x1, L12_x2, L12_D, L23_x3, L23_D, L34_F;
assign F = L34_F;
always @(posedge clk)			//stage 1
	begin
		L12_x1 <= #4 A+B;
		L12_x2 <= #4 C-D;
		L12_D <= D;
	end
always @(posedge clk)			//stage 2
	begin
		L23_x3 <= #4 L12_x1 + L12_x2;
		L23_D <= L12_D;
	end
always @(posedge clk)			//stage 3
L34_F <= #6 L23_x3 * L23_D;
endmodule

